특징
-Node 객체로 구성
    Node: 데이터 저장 필드, 다음 노드 가리키는 포인터. 노드들이 연결된 것이 LinkedList
-Head/Tail
    Tail의 next point는 null

기능
-리스트에 데이터 삽입
-리스트에 데이터 삭제
-리스트 검색

검색
-next pointer를 통해서만 데이터 접근 가능.
-> 찾고자 하는 위치는 Head에서 부터 순차적으로 검색: O(N)

추가
-Tail의 뒤에 추가: O(N)

삽입
-뒤의 데이터를 이동시켜 줄 필요가 없어 삽입 자체는 굉장히 간단하지만, 삽입 할 위치를 찾아가는 과정: O(N)
-데이터 삽입 위치에 따라 비용이 다르다.(최선: Head에 삽입: O(1), 최악: Tail에 삽입: O(N))

삭제
-뒤의 데이터를 이동시켜 줄 필요가 없어 삭제 자체는 굉장히 간단하지만, 삭제 할 위치를 찾아가는 과정: O(N)
//-데이터 삭제 위치에 따라 비용이 다르다.(최선: Head 삭제: O(1), 최악: Tail에 삭제: O(N))

장점
-배열의 복사나 재할당 없이 데이터 추가 가능
-유연한 공간

단점
-데이터 접근에 대한 시간이 늘어남